// Generated by CoffeeScript 1.8.0
(function() {
  var Lexer, SourceMap, compile, extensions, formatSourcePosition, helpers, lexer, parser, setTranslatingFile, toSAST;

  Lexer = require('./lexer').Lexer;

  parser = require('./parser').parser;

  toSAST = require('./transformer').toSAST;

  helpers = require('./helpers');

  SourceMap = require('./sourcemap');

  setTranslatingFile = require('./helpers').setTranslatingFile;

  exports.VERSION = '1.6.3';

  extensions = ['.coffee', '.litcoffee', '.coffee.md'];

  exports.helpers = helpers;

  exports.compile = compile = function(code, options) {
    var answer, ast, currentColumn, currentLine, foundNonFragment, fragment, fragments, header, js, l, lexemes, map, merge, newLines, sast, _i, _j, _len, _len1;
    if (options == null) {
      options = {};
    }
    merge = helpers.merge;
    if (options.sourceMap) {
      map = new SourceMap;
    }
    lexemes = lexer.tokenize(code);
    ast = parser.parse(lexemes, options);
    sast = toSAST(ast);
    fragments = sast.compileToFragments(options);
    for (_i = 0, _len = fragments.length; _i < _len; _i++) {
      fragment = fragments[_i];
      if (fragment.constructor.name !== 'CodeFragment') {
        console.log("Internal Type Error: expected code fragment, found");
        console.log("    " + fragment.constructor.name + ":", fragment, "\n");
        foundNonFragment = true;
      }
    }
    if (foundNonFragment) {
      process.exit(1);
    }
    currentLine = 0;
    if (options.header) {
      currentLine += 1;
    }
    if (options.shiftLine) {
      currentLine += 1;
    }
    currentColumn = 0;
    js = "";
    for (_j = 0, _len1 = fragments.length; _j < _len1; _j++) {
      fragment = fragments[_j];
      if (options.sourceMap) {
        l = fragment.locationData;
        if (l && l.first_line && l.last_line && l.first_column && l.last_column) {
          map.add([fragment.locationData.first_line, fragment.locationData.first_column], [currentLine, currentColumn], {
            noReplace: true
          });
        }
        newLines = helpers.count(fragment.code, "\n");
        currentLine += newLines;
        currentColumn = fragment.code.length - (newLines ? fragment.code.lastIndexOf("\n") : 0);
      }
      js += fragment.code;
    }
    if (options.header) {
      header = "Generated by CoffeeScript " + this.VERSION;
      js = "// " + header + "\n" + js;
    }
    if (options.sourceMap) {
      answer = {
        js: js
      };
      answer.sourceMap = map;
      answer.v3SourceMap = map.generate(options, code);
      answer.sourceMapHash = map.generateHash(options, code);
      return answer;
    } else {
      return js;
    }
  };

  exports.tokens = function(code, options) {
    return lexer.tokenize(code, options);
  };

  exports.nodes = function(source, options) {
    if (typeof source === 'string') {
      return parser.parse(lexer.tokenize(source, options));
    } else {
      return parser.parse(source);
    }
  };

  lexer = new Lexer;

  parser.lexer = {
    lex: function() {
      var tag, token;
      token = this.tokens[this.pos++];
      if (token) {
        tag = token[0], this.yytext = token[1], this.yylloc = token[2];
        this.yylineno = this.yylloc.first_line;
      } else {
        tag = '';
      }
      return tag;
    },
    setInput: function(tokens) {
      this.tokens = tokens;
      return this.pos = 0;
    },
    upcomingInput: function() {
      return "";
    }
  };

  parser.yy = require('./nodes');

  parser.yy.parseError = function(message, _arg) {
    var token;
    token = _arg.token;
    throw new Error;
    message = "unexpected " + (token === 1 ? 'end of input' : token);
    return helpers.throwSyntaxError(message, parser.lexer.yylloc);
  };

  formatSourcePosition = function(frame, getSourceMapping) {
    var as, column, fileLocation, fileName, functionName, isConstructor, isMethodCall, line, methodName, source, tp, typeName;
    fileName = void 0;
    fileLocation = '';
    if (frame.isNative()) {
      fileLocation = "native";
    } else {
      if (frame.isEval()) {
        fileName = frame.getScriptNameOrSourceURL();
        if (!fileName) {
          fileLocation = "" + (frame.getEvalOrigin()) + ", ";
        }
      } else {
        fileName = frame.getFileName();
      }
      fileName || (fileName = "<anonymous>");
      line = frame.getLineNumber();
      column = frame.getColumnNumber();
      source = getSourceMapping(fileName, line, column);
      fileLocation = source ? "" + fileName + ":" + source[0] + ":" + source[1] : "" + fileName + ":" + line + ":" + column;
    }
    functionName = frame.getFunctionName();
    isConstructor = frame.isConstructor();
    isMethodCall = !(frame.isToplevel() || isConstructor);
    if (isMethodCall) {
      methodName = frame.getMethodName();
      typeName = frame.getTypeName();
      if (functionName) {
        tp = as = '';
        if (typeName && functionName.indexOf(typeName)) {
          tp = "" + typeName + ".";
        }
        if (methodName && functionName.indexOf("." + methodName) !== functionName.length - methodName.length - 1) {
          as = " [as " + methodName + "]";
        }
        return "" + tp + functionName + as + " (" + fileLocation + ")";
      } else {
        return "" + typeName + "." + (methodName || '<anonymous>') + " (" + fileLocation + ")";
      }
    } else if (isConstructor) {
      return "new " + (functionName || '<anonymous>') + " (" + fileLocation + ")";
    } else if (functionName) {
      return "" + functionName + " (" + fileLocation + ")";
    } else {
      return fileLocation;
    }
  };

}).call(this);

//# sourceMappingURL=coffee-script.js.map
