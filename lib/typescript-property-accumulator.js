// Generated by CoffeeScript 1.8.0
(function() {
  var addProperties, fs, lineStream, spawn, us,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  fs = require('fs');

  spawn = require('child_process').spawn;

  us = require('underscore');

  lineStream = require('line-input-stream');

  addProperties = function(tscripts) {
    var classes, realErrorCount, tsc;
    classes = [];
    realErrorCount = 0;
    tsc = spawn('tsc', tscripts);
    return lineStream(tsc.stderr).on('line', (function(_this) {
      return function(line) {
        var EREGEX, klass, match, property, type, _ref;
        EREGEX = /error TS2094: The property '(.*)' does not exist on value of type '(.*)'\.\n?$/;
        if (_ref = line.match(EREGEX) || false, match = _ref[0], property = _ref[1], type = _ref[2], _ref) {
          klass = (classes[type] || (classes[type] = []));
          if (__indexOf.call(klass, property) < 0) {
            return klass.push(property);
          }
        } else {
          return realErrorCount += 1;
        }
      };
    })(this)).on('end', (function(_this) {
      return function() {
        var file, _i, _len, _results;
        _results = [];
        for (_i = 0, _len = tscripts.length; _i < _len; _i++) {
          file = tscripts[_i];
          _results.push((function(file) {
            return fs.readFile(file, 'utf8', function(err, data) {
              var CDEFREGEX, className, decls, i, line, lines, newData, prop, properties, spacing, _, _j, _len1, _ref;
              if (err) {
                throw err;
              }
              lines = data.split('\n');
              CDEFREGEX = /^(\s*)(export )?class ([a-zA-Z_$][a-zA-Z_$0-9]*) ([^{}]*){/;
              for (i = _j = 0, _len1 = lines.length; _j < _len1; i = ++_j) {
                line = lines[i];
                if (_ref = line.match(CDEFREGEX) || false, _ = _ref[0], spacing = _ref[1], _ = _ref[2], className = _ref[3], _ref) {
                  if (properties = classes[className]) {
                    spacing += '    ';
                    decls = (function() {
                      var _k, _len2, _results1;
                      _results1 = [];
                      for (_k = 0, _len2 = properties.length; _k < _len2; _k++) {
                        prop = properties[_k];
                        _results1.push("" + spacing + "public " + prop + ";");
                      }
                      return _results1;
                    })();
                    decls.unshift(line);
                    decls.push('');
                    lines[i] = decls;
                  }
                }
              }
              newData = us.flatten(lines).join('\n');
              return fs.writeFile(file, newData);
            });
          })(file));
        }
        return _results;
      };
    })(this));
  };

  module.exports = addProperties;

  if (require.main === module) {
    addProperties(process.argv.slice(2));
  }

}).call(this);

//# sourceMappingURL=typescript-property-accumulator.js.map
