// Generated by CoffeeScript 1.8.0
(function() {
  var us;

  us = require('underscore');

  exports.makeFakeblocks = function(code) {
    var inRealCommentBlock, indent, isComment, isSameIndentation, lastLineIndent, line, rewritten_line, rewritten_lines, _;
    lastLineIndent = void 0;
    inRealCommentBlock = false;
    rewritten_lines = (function() {
      var _i, _len, _ref, _ref1, _ref2, _results;
      _ref = code.split('\n');
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        isComment = (_ref1 = line.match(/^(\s*)#(?!##)/) || false, _ = _ref1[0], indent = _ref1[1], _ref1);

        /*
         * isSameIndentation is false if the last line was a comment and
         * this line is not, or vice-versa.  It's true if neither this
         * line nor the preceding line are comments.  Lastly, it's true
         * where both this and the preceding line are comments iff they have
         * the same indentation, and should be part of the same fakeblock.
         */
        isSameIndentation = indent === lastLineIndent;
        if (((_ref2 = line.match(/###/g)) != null ? _ref2.length : void 0) % 2 === 1) {
          inRealCommentBlock = !inRealCommentBlock;
          rewritten_line = line;
        } else if (!(inRealCommentBlock || isSameIndentation)) {
          rewritten_line = [lastLineIndent != null ? ["" + lastLineIndent + "###"] : [], isComment ? ["" + indent + "###fakeblock"] : [], line];
        } else {
          rewritten_line = line;
        }
        lastLineIndent = indent;
        _results.push(rewritten_line);
      }
      return _results;
    })();
    return us.flatten(rewritten_lines).join('\n');
  };

  exports.unmakeFakeblocks = function(code) {
    code = code.replace(/\/\*(([\n\r]|.)*?)\*\//g, function(match) {
      return match.replace(/(\n\s*)#/g, "$1//");
    });
    return code.replace(/[^\S\n]*\/\*fakeblock\n(([\n\r]|.)*?\n)[^\S\n]*\*\/\n/g, "$1");
  };

}).call(this);

//# sourceMappingURL=compile-with-comments.js.map
